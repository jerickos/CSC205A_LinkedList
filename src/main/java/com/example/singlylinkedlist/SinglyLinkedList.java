package com.example.singlylinkedlist;
//linkedlist keeps track of the heads and tails


import java.util.StringJoiner;

public class SinglyLinkedList<E> implements LinkedList<E> {


    private Node head;
    private Node tail;


    public SinglyLinkedList() {
        head = null;
        tail = null;
    }

    @Override
    public void addFirst(E element) {

        Node node = new Node(element, head); //1

        //starts with an empty linkedlist
        if (head == null) {
            head = node;
            tail = head;
        } else {
            head = node;
        }
    }

    @Override
    public void addLast(E element) {
        Node node = new Node(element, null); //1

        if (tail == null) {
            tail = node; //2
            head = tail; //3
        }
        tail.next = node; //2
        tail = node; //3
    }

    @Override
    public E pollFirst() {
        E element;
        if (head == null) {
            element = null;
        } else {
            element = head.element;

            Node next = head.next;
            head.next = null;
            head = next;
        }
        return element;
    }

    @Override
    public E pollLast() {
        E element;
        if(tail == null){
            element = null;
        }else{
            element = tail.element;
        }
        //code needed to remove the last element
        if(head == tail){
            head = null;
            tail = null;
        }else{

            Node current = head;
            Node previous =head;
            while(current.next != null){
                //makes current the leading and previous following
                previous = current;
                current = current.next;
            }
            tail = previous;
            tail.next = null;
        }

        return element;
    }

    @Override
    public E peakFirst() {
        return head.element;
    }

    @Override
    public E peakLast() {
        return tail.element;
    }


    //needed to empty the list
    @Override
    public void clear() {

        Node current = head;
        while(current != null){
            Node next = current.next;
            current.next =null;
            current = next;
        }

        head = null;
        tail = null;

    }

    //linear search alurithum
    @Override
    public boolean contains(E element) {

        boolean contains = false;
        Node current = head;
        while(current != null) {
            Node next = current.next;
            if (current.element == element) {
                contains = true;
                break;
            }
            current = next;
        }
        return contains;
    }

    //cannot be autogenerated, needed to print everyting in the list
    @Override
    public String toString() {

        StringBuilder builder = new StringBuilder("[");
        StringJoiner joiner = new StringJoiner(", ");
        Node current = head;
        if (current != null){
            while(current != null){
                joiner.add(current.element.toString());
                current = current.next;
            }
        }
        builder.append(joiner);
        builder.append("]");
        return builder.toString();
    }


    private class Node {
        Node next;
        E element;

        public Node(E element, Node next){
            this.element = element;
            this.next = next;
        }
    }
}
